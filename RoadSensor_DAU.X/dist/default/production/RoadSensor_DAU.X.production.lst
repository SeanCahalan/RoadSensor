

Microchip Technology PIC LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Sep 08 10:40:26 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	16F874A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  000E                     	;# 
    46  000F                     	;# 
    47  0010                     	;# 
    48  0011                     	;# 
    49  0012                     	;# 
    50  0013                     	;# 
    51  0014                     	;# 
    52  0015                     	;# 
    53  0015                     	;# 
    54  0016                     	;# 
    55  0017                     	;# 
    56  0018                     	;# 
    57  0019                     	;# 
    58  001A                     	;# 
    59  001B                     	;# 
    60  001B                     	;# 
    61  001C                     	;# 
    62  001D                     	;# 
    63  001E                     	;# 
    64  001F                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0087                     	;# 
    69  0088                     	;# 
    70  0089                     	;# 
    71  008C                     	;# 
    72  008D                     	;# 
    73  008E                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0093                     	;# 
    77  0094                     	;# 
    78  0098                     	;# 
    79  0099                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  010E                     	;# 
    87  010F                     	;# 
    88  018C                     	;# 
    89  018D                     	;# 
    90                           
    91                           	psect	idataBANK0
    92  03A7                     __pidataBANK0:	
    93                           
    94                           ;initializer for _PollTimer
    95  03A7  343A               	retlw	58
    96                           
    97                           	psect	idataBANK1
    98  0335                     __pidataBANK1:	
    99                           
   100                           ;initializer for _TxBuf
   101  0335  3401               	retlw	1
   102  0336  3410               	retlw	16
   103  0337  3401               	retlw	1
   104  0338  3410               	retlw	16
   105  0339  3401               	retlw	1
   106  033A  34F0               	retlw	240
   107  033B  3407               	retlw	7
   108  033C  3402               	retlw	2
   109  033D  342F               	retlw	47
   110  033E  3410               	retlw	16
   111  033F  3402               	retlw	2
   112  0340  3486               	retlw	134
   113  0341  3403               	retlw	3
   114  0342  3459               	retlw	89
   115  0343  3402               	retlw	2
   116  0344  3403               	retlw	3
   117  0345  3418               	retlw	24
   118  0346  347E               	retlw	126
   119  0347  3404               	retlw	4
   120  000B                     _INTCONbits	set	11
   121  000C                     _PIR1bits	set	12
   122  0005                     _PORTAbits	set	5
   123  0006                     _PORTBbits	set	6
   124  0007                     _PORTCbits	set	7
   125  0008                     _PORTDbits	set	8
   126  0009                     _PORTEbits	set	9
   127  001A                     _RCREG	set	26
   128  0018                     _RCSTAbits	set	24
   129  0010                     _T1CON	set	16
   130  0010                     _T1CONbits	set	16
   131  000F                     _TMR1H	set	15
   132  000E                     _TMR1L	set	14
   133  0019                     _TXREG	set	25
   134  009F                     _ADCON1	set	159
   135  0081                     _OPTION_REGbits	set	129
   136  008C                     _PIE1bits	set	140
   137  0099                     _SPBRG	set	153
   138  0085                     _TRISAbits	set	133
   139  0086                     _TRISBbits	set	134
   140  0087                     _TRISCbits	set	135
   141  0088                     _TRISDbits	set	136
   142  0089                     _TRISEbits	set	137
   143  0098                     _TXSTAbits	set	152
   144                           
   145                           ; #config settings
   146  0000                     
   147                           	psect	cinit
   148  0013                     start_initialization:	
   149  0013                     __initialization:	
   150                           
   151                           ; Clear objects allocated to BANK0
   152  0013  1383               	bcf	3,7	;select IRP bank0
   153  0014  3020               	movlw	low __pbssBANK0
   154  0015  0084               	movwf	4
   155  0016  3049               	movlw	low (__pbssBANK0+41)
   156  0017  118A  239F  118A   	fcall	clear_ram0
   157                           
   158                           ; Initialize objects allocated to BANK1
   159  001A  30B3               	movlw	low (__pdataBANK1+19)
   160  001B  00FD               	movwf	btemp+-1
   161  001C  3003               	movlw	high __pidataBANK1
   162  001D  00FE               	movwf	btemp
   163  001E  3035               	movlw	low __pidataBANK1
   164  001F  00FF               	movwf	btemp+1
   165  0020  30A0               	movlw	low __pdataBANK1
   166  0021  0084               	movwf	4
   167  0022  118A  235F  118A   	fcall	init_ram0
   168                           
   169                           ; Initialize objects allocated to BANK0
   170  0025  118A  23A7         	fcall	__pidataBANK0	;fetch initializer
   171  0027  00ED               	movwf	__pdataBANK0& (0+127)
   172  0028                     end_of_initialization:	
   173                           ;End of C runtime variable initialization code
   174                           
   175  0028                     __end_of__initialization:	
   176  0028  0183               	clrf	3
   177  0029  118A  2B05         	ljmp	_main	;jump to C main() function
   178                           
   179                           	psect	bssBANK0
   180  0020                     __pbssBANK0:	
   181  0020                     _GreenLED_timer:	
   182  0020                     	ds	2
   183  0022                     _RedLED_timer:	
   184  0022                     	ds	2
   185  0024                     _Rx_OK:	
   186  0024                     	ds	2
   187  0026                     isr@Count:	
   188  0026                     	ds	2
   189  0028                     _PrRxMsg:	
   190  0028                     	ds	1
   191  0029                     _RxPtr:	
   192  0029                     	ds	1
   193  002A                     _RxTimer:	
   194  002A                     	ds	1
   195  002B                     _SecondInterrupt:	
   196  002B                     	ds	1
   197  002C                     _RxBuf:	
   198  002C                     	ds	29
   199                           
   200                           	psect	dataBANK0
   201  006D                     __pdataBANK0:	
   202  006D                     _PollTimer:	
   203  006D                     	ds	1
   204                           
   205                           	psect	dataBANK1
   206  00A0                     __pdataBANK1:	
   207  00A0                     _TxBuf:	
   208  00A0                     	ds	19
   209                           
   210                           	psect	clrtext
   211  039F                     clear_ram0:	
   212                           ;	Called with FSR containing the base address, and
   213                           ;	W with the last address+1
   214                           
   215  039F  0064               	clrwdt	;clear the watchdog before getting into this loop
   216  03A0                     clrloop0:	
   217  03A0  0180               	clrf	0	;clear RAM location pointed to by FSR
   218  03A1  0A84               	incf	4,f	;increment pointer
   219  03A2  0604               	xorwf	4,w	;XOR with final address
   220  03A3  1903               	btfsc	3,2	;have we reached the end yet?
   221  03A4  3400               	retlw	0	;all done for this memory range, return
   222  03A5  0604               	xorwf	4,w	;XOR again to restore value
   223  03A6  2BA0               	goto	clrloop0	;do the next byte
   224                           
   225                           	psect	inittext
   226  035B                     init_fetch0:	
   227                           ;	Called with low address in FSR and high address in W
   228                           
   229  035B  087E               	movf	126,w
   230  035C  008A               	movwf	10
   231  035D  087F               	movf	127,w
   232  035E  0082               	movwf	2
   233  035F                     init_ram0:	
   234                           ;Called with:
   235                           ;	high address of idata address in btemp 
   236                           ;	low address of idata address in btemp+1 
   237                           ;	low address of data in FSR
   238                           ;	high address + 1 of data in btemp-1
   239                           
   240  035F  235B  118A         	fcall	init_fetch0
   241  0361  0080               	movwf	0
   242  0362  0A84               	incf	4,f
   243  0363  0804               	movf	4,w
   244  0364  067D               	xorwf	125,w
   245  0365  1903               	btfsc	3,2
   246  0366  3400               	retlw	0
   247  0367  0AFF               	incf	127,f
   248  0368  1903               	btfsc	3,2
   249  0369  0AFE               	incf	126,f
   250  036A  2B5F               	goto	init_ram0
   251                           
   252                           	psect	cstackCOMMON
   253  0000                     __pcstackCOMMON:	
   254  0000                     ??_InitPorts:	
   255  0000                     ??_InitTimer:	
   256                           ; 0 bytes @ 0x0
   257                           
   258  0000                     ??_Init_UART:	
   259                           ; 0 bytes @ 0x0
   260                           
   261  0000                     ??_TestRelays:	
   262                           ; 0 bytes @ 0x0
   263                           
   264  0000                     ??_PollSensor:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0000                     ??_UART_putc:	
   268                           ; 0 bytes @ 0x0
   269                           
   270  0000                     ??_TurnOffRelays:	
   271                           ; 0 bytes @ 0x0
   272                           
   273                           
   274                           	psect	cstackBANK0
   275  0049                     __pcstackBANK0:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0049                     ?_InitPorts:	
   279  0049                     ?_InitTimer:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0049                     ?_Init_UART:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0049                     ?_TestRelays:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0049                     ?_Read_UART:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0049                     ?_Pr_UART_Data:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0049                     ?_PollSensor:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0049                     ?_UART_putc:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0049                     ?_main:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0049                     ?_isr:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0049                     ??_isr:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0049                     ?_TurnOffRelays:	
   310                           ; 0 bytes @ 0x0
   311                           
   312                           
   313                           ; 0 bytes @ 0x0
   314  0049                     	ds	4
   315  004D                     ??_Read_UART:	
   316  004D                     ?_calc_crc:	
   317                           ; 0 bytes @ 0x4
   318                           
   319  004D                     UART_putc@c:	
   320                           ; 2 bytes @ 0x4
   321                           
   322  004D                     calc_crc@crc_buff:	
   323                           ; 1 bytes @ 0x4
   324                           
   325  004D                     TestRelays@i:	
   326                           ; 2 bytes @ 0x4
   327                           
   328                           
   329                           ; 2 bytes @ 0x4
   330  004D                     	ds	1
   331  004E                     Read_UART@c:	
   332  004E                     PollSensor@i:	
   333                           ; 1 bytes @ 0x5
   334                           
   335                           
   336                           ; 2 bytes @ 0x5
   337  004E                     	ds	1
   338  004F                     calc_crc@input:	
   339                           
   340                           ; 1 bytes @ 0x6
   341  004F                     	ds	1
   342  0050                     ??_calc_crc:	
   343                           
   344                           ; 0 bytes @ 0x7
   345  0050                     	ds	6
   346  0056                     calc_crc@x16:	
   347                           
   348                           ; 2 bytes @ 0xD
   349  0056                     	ds	2
   350  0058                     calc_crc@i:	
   351                           
   352                           ; 1 bytes @ 0xF
   353  0058                     	ds	1
   354  0059                     ?_generateCRC:	
   355  0059                     generateCRC@len:	
   356                           ; 2 bytes @ 0x10
   357                           
   358                           
   359                           ; 2 bytes @ 0x10
   360  0059                     	ds	2
   361  005B                     ??_generateCRC:	
   362                           
   363                           ; 0 bytes @ 0x12
   364  005B                     	ds	3
   365  005E                     generateCRC@buf:	
   366                           
   367                           ; 1 bytes @ 0x15
   368  005E                     	ds	1
   369  005F                     generateCRC@crc:	
   370                           
   371                           ; 2 bytes @ 0x16
   372  005F                     	ds	2
   373  0061                     generateCRC@i:	
   374                           
   375                           ; 2 bytes @ 0x18
   376  0061                     	ds	2
   377  0063                     ??_Pr_UART_Data:	
   378                           
   379                           ; 0 bytes @ 0x1A
   380  0063                     	ds	4
   381  0067                     Pr_UART_Data@sensorVal:	
   382                           
   383                           ; 2 bytes @ 0x1E
   384  0067                     	ds	2
   385  0069                     Pr_UART_Data@status:	
   386                           
   387                           ; 1 bytes @ 0x20
   388  0069                     	ds	1
   389  006A                     Pr_UART_Data@crc:	
   390                           
   391                           ; 2 bytes @ 0x21
   392  006A                     	ds	2
   393  006C                     ??_main:	
   394                           
   395                           ; 0 bytes @ 0x23
   396  006C                     	ds	1
   397                           
   398                           	psect	maintext
   399  0305                     __pmaintext:	
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 129 in file "main.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;		None               void
   412 ;; Registers used:
   413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : B00/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMMON   BANK0   BANK1
   419 ;;      Params:         0       0       0
   420 ;;      Locals:         0       0       0
   421 ;;      Temps:          0       1       0
   422 ;;      Totals:         0       1       0
   423 ;;Total ram usage:        1 bytes
   424 ;; Hardware stack levels required when called:    4
   425 ;; This function calls:
   426 ;;		_InitPorts
   427 ;;		_InitTimer
   428 ;;		_Init_UART
   429 ;;		_PollSensor
   430 ;;		_Pr_UART_Data
   431 ;;		_Read_UART
   432 ;;		_TestRelays
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _main
   440  0305                     _main:	
   441                           
   442                           ;main.c: 132: OPTION_REGbits.PSA = 1;
   443                           
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   446  0305  1683               	bsf	3,5	;RP0=1, select bank1
   447  0306  1303               	bcf	3,6	;RP1=0, select bank1
   448  0307  1581               	bsf	1,3	;volatile
   449                           
   450                           ;main.c: 133: OPTION_REGbits.PS0 = 1;
   451  0308  1401               	bsf	1,0	;volatile
   452                           
   453                           ;main.c: 134: OPTION_REGbits.PS1 = 1;
   454  0309  1481               	bsf	1,1	;volatile
   455                           
   456                           ;main.c: 135: OPTION_REGbits.PS2 = 1;
   457  030A  1501               	bsf	1,2	;volatile
   458                           
   459                           ;main.c: 137: InitPorts();
   460  030B  118A  20EF  118A   	fcall	_InitPorts
   461                           
   462                           ;main.c: 138: InitTimer();
   463  030E  118A  2348  118A   	fcall	_InitTimer
   464                           
   465                           ;main.c: 139: Init_UART();
   466  0311  118A  237B  118A   	fcall	_Init_UART
   467                           
   468                           ;main.c: 141: if(PORTEbits.RE1 == 1)
   469  0314  1283               	bcf	3,5	;RP0=0, select bank0
   470  0315  1303               	bcf	3,6	;RP1=0, select bank0
   471  0316  1C89               	btfss	9,1	;volatile
   472  0317  2B1B               	goto	l90
   473                           
   474                           ;main.c: 142: TestRelays();
   475  0318  118A  21CA  118A   	fcall	_TestRelays
   476  031B                     l90:	
   477                           ;main.c: 145: for (;;)
   478                           
   479  031B  0064               	clrwdt	;# 
   480                           
   481                           ;main.c: 148: Read_UART();
   482  031C  118A  2252  118A   	fcall	_Read_UART
   483                           
   484                           ;main.c: 149: Pr_UART_Data();
   485  031F  118A  202B  118A   	fcall	_Pr_UART_Data
   486                           
   487                           ;main.c: 151: if (SecondInterrupt)
   488  0322  1283               	bcf	3,5	;RP0=0, select bank0
   489  0323  1303               	bcf	3,6	;RP1=0, select bank0
   490  0324  082B               	movf	_SecondInterrupt,w
   491  0325  1903               	btfsc	3,2
   492  0326  2B1B               	goto	l90
   493                           
   494                           ;main.c: 152: {
   495                           ;main.c: 153: SecondInterrupt = 0;
   496  0327  01AB               	clrf	_SecondInterrupt
   497                           
   498                           ;main.c: 155: if (++PollTimer > 2)
   499  0328  3001               	movlw	1
   500  0329  00EC               	movwf	??_main
   501  032A  086C               	movf	??_main,w
   502  032B  07ED               	addwf	_PollTimer,f
   503  032C  3003               	movlw	3
   504  032D  026D               	subwf	_PollTimer,w
   505  032E  1C03               	skipc
   506  032F  2B1B               	goto	l90
   507                           
   508                           ;main.c: 156: {
   509                           ;main.c: 157: PollTimer = 0;
   510  0330  01ED               	clrf	_PollTimer
   511                           
   512                           ;main.c: 158: PollSensor();
   513  0331  118A  22D0  118A   	fcall	_PollSensor
   514                           
   515                           ;main.c: 159: }
   516                           ;main.c: 160: }
   517                           ;main.c: 161: }
   518  0334  2B1B               	goto	l90
   519  0335                     __end_of_main:	
   520                           
   521                           	psect	text1
   522  01CA                     __ptext1:	
   523 ;; *************** function _TestRelays *****************
   524 ;; Defined at:
   525 ;;		line 556 in file "main.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;  i               2    4[BANK0 ] int 
   530 ;; Return value:  Size  Location     Type
   531 ;;		None               void
   532 ;; Registers used:
   533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMMON   BANK0   BANK1
   539 ;;      Params:         0       0       0
   540 ;;      Locals:         0       2       0
   541 ;;      Temps:          0       0       0
   542 ;;      Totals:         0       2       0
   543 ;;Total ram usage:        2 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; Hardware stack levels required when called:    2
   546 ;; This function calls:
   547 ;;		_TurnOffRelays
   548 ;; This function is called by:
   549 ;;		_main
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           
   554                           ;psect for function _TestRelays
   555  01CA                     _TestRelays:	
   556                           
   557                           ;main.c: 557: int i = 0;
   558                           
   559                           ;incstack = 0
   560                           ; Regs used in _TestRelays: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   561  01CA  1283               	bcf	3,5	;RP0=0, select bank0
   562  01CB  1303               	bcf	3,6	;RP1=0, select bank0
   563  01CC  01CD               	clrf	TestRelays@i
   564  01CD  01CE               	clrf	TestRelays@i+1
   565  01CE                     l170:	
   566                           ;main.c: 558: for (;;)
   567                           
   568  01CE  0064               	clrwdt	;# 
   569                           
   570                           ;main.c: 562: if (SecondInterrupt)
   571  01CF  1283               	bcf	3,5	;RP0=0, select bank0
   572  01D0  1303               	bcf	3,6	;RP1=0, select bank0
   573  01D1  082B               	movf	_SecondInterrupt,w
   574  01D2  1903               	btfsc	3,2
   575  01D3  29CE               	goto	l170
   576                           
   577                           ;main.c: 563: {
   578                           ;main.c: 564: TurnOffRelays();
   579  01D4  118A  2394  118A   	fcall	_TurnOffRelays
   580                           
   581                           ;main.c: 565: SecondInterrupt = 0;
   582  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   583  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   584  01D9  01AB               	clrf	_SecondInterrupt
   585                           
   586                           ;main.c: 567: switch(i){
   587  01DA  29EB               	goto	l984
   588  01DB                     l173:	
   589                           ;main.c: 568: case 0:
   590                           
   591                           
   592                           ;main.c: 569: PORTDbits.RD3 = 1;
   593  01DB  1588               	bsf	8,3	;volatile
   594                           
   595                           ;main.c: 570: break;
   596  01DC  29FC               	goto	l986
   597  01DD                     l175:	
   598                           ;main.c: 571: case 1:
   599                           
   600                           
   601                           ;main.c: 572: PORTBbits.RB0 = 1;
   602  01DD  1406               	bsf	6,0	;volatile
   603                           
   604                           ;main.c: 573: break;
   605  01DE  29FC               	goto	l986
   606  01DF                     l176:	
   607                           ;main.c: 574: case 2:
   608                           
   609                           
   610                           ;main.c: 575: PORTBbits.RB1 = 1;
   611  01DF  1486               	bsf	6,1	;volatile
   612                           
   613                           ;main.c: 576: break;
   614  01E0  29FC               	goto	l986
   615  01E1                     l177:	
   616                           ;main.c: 577: case 3:
   617                           
   618                           
   619                           ;main.c: 578: PORTBbits.RB2 = 1;
   620  01E1  1506               	bsf	6,2	;volatile
   621                           
   622                           ;main.c: 579: break;
   623  01E2  29FC               	goto	l986
   624  01E3                     l178:	
   625                           ;main.c: 580: case 4:
   626                           
   627                           
   628                           ;main.c: 581: PORTBbits.RB3 = 1;
   629  01E3  1586               	bsf	6,3	;volatile
   630                           
   631                           ;main.c: 582: break;
   632  01E4  29FC               	goto	l986
   633  01E5                     l179:	
   634                           ;main.c: 583: case 5:
   635                           
   636                           
   637                           ;main.c: 584: PORTBbits.RB4 = 1;
   638  01E5  1606               	bsf	6,4	;volatile
   639                           
   640                           ;main.c: 585: break;
   641  01E6  29FC               	goto	l986
   642  01E7                     l180:	
   643                           ;main.c: 586: case 6:
   644                           
   645                           
   646                           ;main.c: 587: PORTDbits.RD2 = 1;
   647  01E7  1508               	bsf	8,2	;volatile
   648                           
   649                           ;main.c: 588: break;
   650  01E8  29FC               	goto	l986
   651  01E9                     l181:	
   652                           ;main.c: 589: case 7:
   653                           
   654                           
   655                           ;main.c: 590: PORTBbits.RB5 = 1;
   656  01E9  1686               	bsf	6,5	;volatile
   657                           
   658                           ;main.c: 592: }
   659                           
   660                           ;main.c: 591: break;
   661  01EA  29FC               	goto	l986
   662  01EB                     l984:	
   663                           
   664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   665                           ; Switch size 1, requested type "space"
   666                           ; Number of cases is 1, Range of values is 0 to 0
   667                           ; switch strategies available:
   668                           ; Name         Instructions Cycles
   669                           ; simple_byte            4     3 (average)
   670                           ; direct_byte            9     7 (fixed)
   671                           ; jumptable            260     6 (fixed)
   672                           ;	Chosen strategy is simple_byte
   673  01EB  084E               	movf	TestRelays@i+1,w
   674  01EC  3A00               	xorlw	0	; case 0
   675  01ED  1903               	skipnz
   676  01EE  29F0               	goto	l1176
   677  01EF  29FC               	goto	l986
   678  01F0                     l1176:	
   679                           
   680                           ; Switch size 1, requested type "space"
   681                           ; Number of cases is 8, Range of values is 0 to 7
   682                           ; switch strategies available:
   683                           ; Name         Instructions Cycles
   684                           ; direct_byte           23     7 (fixed)
   685                           ; simple_byte           25    13 (average)
   686                           ; jumptable            260     6 (fixed)
   687                           ;	Chosen strategy is direct_byte
   688  01F0  084D               	movf	TestRelays@i,w
   689  01F1  0084               	movwf	4
   690  01F2  3008               	movlw	8
   691  01F3  0204               	subwf	4,w
   692  01F4  1803               	skipnc
   693  01F5  29FC               	goto	l986
   694  01F6  3003               	movlw	high S1178
   695  01F7  008A               	movwf	10
   696  01F8  1003               	clrc
   697  01F9  0D04               	rlf	4,w
   698  01FA  3E6B               	addlw	low S1178
   699  01FB  0082               	movwf	2
   700  01FC                     l986:	
   701                           
   702                           ;main.c: 593: if(++i>8)
   703  01FC  3001               	movlw	1
   704  01FD  07CD               	addwf	TestRelays@i,f
   705  01FE  1803               	skipnc
   706  01FF  0ACE               	incf	TestRelays@i+1,f
   707  0200  3000               	movlw	0
   708  0201  07CE               	addwf	TestRelays@i+1,f
   709  0202  084E               	movf	TestRelays@i+1,w
   710  0203  3A80               	xorlw	128
   711  0204  00FF               	movwf	127
   712  0205  3080               	movlw	128
   713  0206  027F               	subwf	127,w
   714  0207  1D03               	skipz
   715  0208  2A0B               	goto	u355
   716  0209  3009               	movlw	9
   717  020A  024D               	subwf	TestRelays@i,w
   718  020B                     u355:	
   719  020B  1803               	btfsc	3,0
   720  020C  0008               	return
   721  020D  29CE               	goto	l170
   722  020E                     __end_of_TestRelays:	
   723                           ;main.c: 595: }
   724                           ;main.c: 596: }
   725                           
   726                           ;main.c: 594: break;
   727                           
   728                           
   729                           	psect	swtext1
   730  036B                     __pswtext1:	
   731  036B                     S1178:	
   732  036B  118A  29DB         	ljmp	l173
   733  036D  118A  29DD         	ljmp	l175
   734  036F  118A  29DF         	ljmp	l176
   735  0371  118A  29E1         	ljmp	l177
   736  0373  118A  29E3         	ljmp	l178
   737  0375  118A  29E5         	ljmp	l179
   738  0377  118A  29E7         	ljmp	l180
   739  0379  118A  29E9         	ljmp	l181
   740                           
   741                           	psect	text2
   742  0252                     __ptext2:	
   743 ;; *************** function _Read_UART *****************
   744 ;; Defined at:
   745 ;;		line 419 in file "main.c"
   746 ;; Parameters:    Size  Location     Type
   747 ;;		None
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  c               1    5[BANK0 ] unsigned char 
   750 ;; Return value:  Size  Location     Type
   751 ;;		None               void
   752 ;; Registers used:
   753 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   754 ;; Tracked objects:
   755 ;;		On entry : 0/0
   756 ;;		On exit  : 0/0
   757 ;;		Unchanged: 0/0
   758 ;; Data sizes:     COMMON   BANK0   BANK1
   759 ;;      Params:         0       0       0
   760 ;;      Locals:         0       1       0
   761 ;;      Temps:          0       1       0
   762 ;;      Totals:         0       2       0
   763 ;;Total ram usage:        2 bytes
   764 ;; Hardware stack levels used:    1
   765 ;; Hardware stack levels required when called:    1
   766 ;; This function calls:
   767 ;;		Nothing
   768 ;; This function is called by:
   769 ;;		_main
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _Read_UART
   775  0252                     _Read_UART:	
   776  0252                     l1008:	
   777                           ;main.c: 421: unsigned char c;
   778                           ;main.c: 423: while (RCSTAbits.OERR)
   779                           
   780                           ;incstack = 0
   781                           ; Regs used in _Read_UART: [wreg-fsr0h+status,2+status,0]
   782                           
   783  0252  1283               	bcf	3,5	;RP0=0, select bank0
   784  0253  1303               	bcf	3,6	;RP1=0, select bank0
   785  0254  1C98               	btfss	24,1	;volatile
   786  0255  2A6A               	goto	l146
   787                           
   788                           ;main.c: 424: {
   789                           ;main.c: 425: c = RCREG;
   790  0256  1283               	bcf	3,5	;RP0=0, select bank0
   791  0257  1303               	bcf	3,6	;RP1=0, select bank0
   792  0258  081A               	movf	26,w	;volatile
   793  0259  00CD               	movwf	??_Read_UART
   794  025A  084D               	movf	??_Read_UART,w
   795  025B  00CE               	movwf	Read_UART@c
   796                           
   797                           ;main.c: 426: c = RCREG;
   798  025C  081A               	movf	26,w	;volatile
   799  025D  00CD               	movwf	??_Read_UART
   800  025E  084D               	movf	??_Read_UART,w
   801  025F  00CE               	movwf	Read_UART@c
   802                           
   803                           ;main.c: 427: c = RCREG;
   804  0260  081A               	movf	26,w	;volatile
   805  0261  00CD               	movwf	??_Read_UART
   806  0262  084D               	movf	??_Read_UART,w
   807  0263  00CE               	movwf	Read_UART@c
   808                           
   809                           ;main.c: 428: RCSTAbits.CREN = 0;
   810  0264  1218               	bcf	24,4	;volatile
   811                           
   812                           ;main.c: 429: __nop();
   813  0265  0000               	nop
   814                           
   815                           ;main.c: 430: RCSTAbits.CREN = 1;
   816  0266  1283               	bcf	3,5	;RP0=0, select bank0
   817  0267  1303               	bcf	3,6	;RP1=0, select bank0
   818  0268  1618               	bsf	24,4	;volatile
   819  0269  2A52               	goto	l1008
   820  026A                     l146:	
   821                           
   822                           ;main.c: 431: }
   823                           ;main.c: 432: if (RCSTAbits.FERR)
   824  026A  1D18               	btfss	24,2	;volatile
   825  026B  2A77               	goto	l1018
   826                           
   827                           ;main.c: 433: {
   828                           ;main.c: 434: c = RCREG;
   829  026C  081A               	movf	26,w	;volatile
   830  026D  00CD               	movwf	??_Read_UART
   831  026E  084D               	movf	??_Read_UART,w
   832  026F  00CE               	movwf	Read_UART@c
   833                           
   834                           ;main.c: 435: TXSTAbits.TXEN = 0;
   835  0270  1683               	bsf	3,5	;RP0=1, select bank1
   836  0271  1303               	bcf	3,6	;RP1=0, select bank1
   837  0272  1298               	bcf	24,5	;volatile
   838                           
   839                           ;main.c: 436: __nop();
   840  0273  0000               	nop
   841                           
   842                           ;main.c: 437: TXSTAbits.TXEN = 1;
   843  0274  1683               	bsf	3,5	;RP0=1, select bank1
   844  0275  1303               	bcf	3,6	;RP1=0, select bank1
   845  0276  1698               	bsf	24,5	;volatile
   846  0277                     l1018:	
   847                           
   848                           ;main.c: 438: }
   849                           ;main.c: 441: if (PIR1bits.RCIF)
   850  0277  1283               	bcf	3,5	;RP0=0, select bank0
   851  0278  1E8C               	btfss	12,5	;volatile
   852  0279  0008               	return
   853                           
   854                           ;main.c: 442: {
   855                           ;main.c: 443: c = RCREG;
   856  027A  081A               	movf	26,w	;volatile
   857  027B  00CD               	movwf	??_Read_UART
   858  027C  084D               	movf	??_Read_UART,w
   859  027D  00CE               	movwf	Read_UART@c
   860                           
   861                           ;main.c: 444: if (RxPtr < 29)
   862  027E  301D               	movlw	29
   863  027F  0229               	subwf	_RxPtr,w
   864  0280  1803               	skipnc
   865  0281  0008               	return
   866                           
   867                           ;main.c: 445: {
   868                           ;main.c: 446: RxBuf[RxPtr++] = c;
   869  0282  084E               	movf	Read_UART@c,w
   870  0283  00CD               	movwf	??_Read_UART
   871  0284  0829               	movf	_RxPtr,w
   872  0285  3E2C               	addlw	(low (_RxBuf| 0))& (0+255)
   873  0286  0084               	movwf	4
   874  0287  084D               	movf	??_Read_UART,w
   875  0288  1383               	bcf	3,7	;select IRP bank0
   876  0289  0080               	movwf	0
   877  028A  3001               	movlw	1
   878  028B  00CD               	movwf	??_Read_UART
   879  028C  084D               	movf	??_Read_UART,w
   880  028D  07A9               	addwf	_RxPtr,f
   881                           
   882                           ;main.c: 447: RxTimer = 50;
   883  028E  3032               	movlw	50
   884  028F  00CD               	movwf	??_Read_UART
   885  0290  084D               	movf	??_Read_UART,w
   886  0291  00AA               	movwf	_RxTimer
   887  0292  0008               	return
   888  0293                     __end_of_Read_UART:	
   889                           
   890                           	psect	text3
   891  002B                     __ptext3:	
   892 ;; *************** function _Pr_UART_Data *****************
   893 ;; Defined at:
   894 ;;		line 492 in file "main.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;		None
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  crc             2   33[BANK0 ] unsigned short 
   899 ;;  sensorVal       2   30[BANK0 ] unsigned int 
   900 ;;  status          1   32[BANK0 ] unsigned char 
   901 ;; Return value:  Size  Location     Type
   902 ;;		None               void
   903 ;; Registers used:
   904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1
   910 ;;      Params:         0       0       0
   911 ;;      Locals:         0       5       0
   912 ;;      Temps:          0       4       0
   913 ;;      Totals:         0       9       0
   914 ;;Total ram usage:        9 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    3
   917 ;; This function calls:
   918 ;;		_TurnOffRelays
   919 ;;		_generateCRC
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _Pr_UART_Data
   927  002B                     _Pr_UART_Data:	
   928                           
   929                           ;main.c: 494: unsigned int sensorVal;
   930                           ;main.c: 495: unsigned short crc;
   931                           ;main.c: 496: unsigned char status;
   932                           ;main.c: 498: if (PrRxMsg)
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in _Pr_UART_Data: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   936  002B  1283               	bcf	3,5	;RP0=0, select bank0
   937  002C  1303               	bcf	3,6	;RP1=0, select bank0
   938  002D  0828               	movf	_PrRxMsg,w
   939  002E  1903               	btfsc	3,2
   940  002F  0008               	return
   941                           
   942                           ;main.c: 499: {
   943                           ;main.c: 500: PrRxMsg = 0;
   944  0030  01A8               	clrf	_PrRxMsg
   945                           
   946                           ;main.c: 501: RxPtr = 0;
   947  0031  01A9               	clrf	_RxPtr
   948                           
   949                           ;main.c: 503: crc = generateCRC(RxBuf, 29);
   950  0032  301D               	movlw	29
   951  0033  00D9               	movwf	generateCRC@len
   952  0034  3000               	movlw	0
   953  0035  00DA               	movwf	generateCRC@len+1
   954  0036  302C               	movlw	(low (_RxBuf| 0))& (0+255)
   955  0037  118A  220E  118A   	fcall	_generateCRC
   956  003A  1283               	bcf	3,5	;RP0=0, select bank0
   957  003B  1303               	bcf	3,6	;RP1=0, select bank0
   958  003C  085A               	movf	?_generateCRC+1,w
   959  003D  00EB               	movwf	Pr_UART_Data@crc+1
   960  003E  0859               	movf	?_generateCRC,w
   961  003F  00EA               	movwf	Pr_UART_Data@crc
   962                           
   963                           ;main.c: 505: if ((RxBuf[26] == (crc&0xff)) && (RxBuf[27] == (crc>>8))){
   964  0040  30FF               	movlw	255
   965  0041  056A               	andwf	Pr_UART_Data@crc,w
   966  0042  00E3               	movwf	??_Pr_UART_Data
   967  0043  3000               	movlw	0
   968  0044  056B               	andwf	Pr_UART_Data@crc+1,w
   969  0045  00E4               	movwf	??_Pr_UART_Data+1
   970  0046  0846               	movf	_RxBuf+26,w
   971  0047  00E5               	movwf	??_Pr_UART_Data+2
   972  0048  01E6               	clrf	??_Pr_UART_Data+3
   973  0049  0864               	movf	??_Pr_UART_Data+1,w
   974  004A  0666               	xorwf	??_Pr_UART_Data+3,w
   975  004B  1D03               	skipz
   976  004C  284F               	goto	u415
   977  004D  0863               	movf	??_Pr_UART_Data,w
   978  004E  0665               	xorwf	??_Pr_UART_Data+2,w
   979  004F                     u415:	
   980  004F  1D03               	skipz
   981  0050  0008               	return
   982  0051  086B               	movf	Pr_UART_Data@crc+1,w
   983  0052  00E4               	movwf	??_Pr_UART_Data+1
   984  0053  086A               	movf	Pr_UART_Data@crc,w
   985  0054  00E3               	movwf	??_Pr_UART_Data
   986  0055  0864               	movf	??_Pr_UART_Data+1,w
   987  0056  00E3               	movwf	??_Pr_UART_Data
   988  0057  01E4               	clrf	??_Pr_UART_Data+1
   989  0058  0847               	movf	_RxBuf+27,w
   990  0059  00E5               	movwf	??_Pr_UART_Data+2
   991  005A  01E6               	clrf	??_Pr_UART_Data+3
   992  005B  0864               	movf	??_Pr_UART_Data+1,w
   993  005C  0666               	xorwf	??_Pr_UART_Data+3,w
   994  005D  1D03               	skipz
   995  005E  2861               	goto	u425
   996  005F  0863               	movf	??_Pr_UART_Data,w
   997  0060  0665               	xorwf	??_Pr_UART_Data+2,w
   998  0061                     u425:	
   999  0061  1D03               	skipz
  1000  0062  0008               	return
  1001                           
  1002                           ;main.c: 506: status = RxBuf[17];
  1003  0063  083D               	movf	_RxBuf+17,w
  1004  0064  00E3               	movwf	??_Pr_UART_Data
  1005  0065  0863               	movf	??_Pr_UART_Data,w
  1006  0066  00E9               	movwf	Pr_UART_Data@status
  1007                           
  1008                           ;main.c: 509: TurnOffRelays();
  1009  0067  118A  2394  118A   	fcall	_TurnOffRelays
  1010                           
  1011                           ;main.c: 511: switch(status){
  1012  006A  28D8               	goto	l1056
  1013  006B                     l159:	
  1014                           ;main.c: 512: case 0x00:
  1015                           
  1016                           
  1017                           ;main.c: 513: PORTDbits.RD2 = 1;
  1018  006B  1508               	bsf	8,2	;volatile
  1019                           
  1020                           ;main.c: 514: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1021  006C  0843               	movf	_RxBuf+23,w
  1022  006D  00E3               	movwf	??_Pr_UART_Data
  1023  006E  01E4               	clrf	??_Pr_UART_Data+1
  1024  006F  0844               	movf	_RxBuf+24,w
  1025  0070  00E5               	movwf	??_Pr_UART_Data+2
  1026  0071  01E6               	clrf	??_Pr_UART_Data+3
  1027  0072  0865               	movf	??_Pr_UART_Data+2,w
  1028  0073  00E6               	movwf	??_Pr_UART_Data+3
  1029  0074  01E5               	clrf	??_Pr_UART_Data+2
  1030  0075  0863               	movf	??_Pr_UART_Data,w
  1031  0076  0465               	iorwf	??_Pr_UART_Data+2,w
  1032  0077  00E7               	movwf	Pr_UART_Data@sensorVal
  1033  0078  0864               	movf	??_Pr_UART_Data+1,w
  1034  0079  0466               	iorwf	??_Pr_UART_Data+3,w
  1035  007A  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1036                           
  1037                           ;main.c: 515: break;
  1038  007B  0008               	return
  1039  007C                     l161:	
  1040                           ;main.c: 516: case 0x01:
  1041                           
  1042                           
  1043                           ;main.c: 517: PORTBbits.RB0 = 1;
  1044  007C  1406               	bsf	6,0	;volatile
  1045                           
  1046                           ;main.c: 518: PORTDbits.RD3 = 1;
  1047  007D  1588               	bsf	8,3	;volatile
  1048                           
  1049                           ;main.c: 519: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1050  007E  0843               	movf	_RxBuf+23,w
  1051  007F  00E3               	movwf	??_Pr_UART_Data
  1052  0080  01E4               	clrf	??_Pr_UART_Data+1
  1053  0081  0844               	movf	_RxBuf+24,w
  1054  0082  00E5               	movwf	??_Pr_UART_Data+2
  1055  0083  01E6               	clrf	??_Pr_UART_Data+3
  1056  0084  0865               	movf	??_Pr_UART_Data+2,w
  1057  0085  00E6               	movwf	??_Pr_UART_Data+3
  1058  0086  01E5               	clrf	??_Pr_UART_Data+2
  1059  0087  0863               	movf	??_Pr_UART_Data,w
  1060  0088  0465               	iorwf	??_Pr_UART_Data+2,w
  1061  0089  00E7               	movwf	Pr_UART_Data@sensorVal
  1062  008A  0864               	movf	??_Pr_UART_Data+1,w
  1063  008B  0466               	iorwf	??_Pr_UART_Data+3,w
  1064  008C  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1065                           
  1066                           ;main.c: 520: break;
  1067  008D  0008               	return
  1068  008E                     l162:	
  1069                           ;main.c: 521: case 0x02:
  1070                           
  1071                           
  1072                           ;main.c: 522: PORTBbits.RB1 = 1;
  1073  008E  1486               	bsf	6,1	;volatile
  1074                           
  1075                           ;main.c: 523: PORTDbits.RD3 = 1;
  1076  008F  1588               	bsf	8,3	;volatile
  1077                           
  1078                           ;main.c: 524: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1079  0090  0843               	movf	_RxBuf+23,w
  1080  0091  00E3               	movwf	??_Pr_UART_Data
  1081  0092  01E4               	clrf	??_Pr_UART_Data+1
  1082  0093  0844               	movf	_RxBuf+24,w
  1083  0094  00E5               	movwf	??_Pr_UART_Data+2
  1084  0095  01E6               	clrf	??_Pr_UART_Data+3
  1085  0096  0865               	movf	??_Pr_UART_Data+2,w
  1086  0097  00E6               	movwf	??_Pr_UART_Data+3
  1087  0098  01E5               	clrf	??_Pr_UART_Data+2
  1088  0099  0863               	movf	??_Pr_UART_Data,w
  1089  009A  0465               	iorwf	??_Pr_UART_Data+2,w
  1090  009B  00E7               	movwf	Pr_UART_Data@sensorVal
  1091  009C  0864               	movf	??_Pr_UART_Data+1,w
  1092  009D  0466               	iorwf	??_Pr_UART_Data+3,w
  1093  009E  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1094                           
  1095                           ;main.c: 525: break;
  1096  009F  0008               	return
  1097  00A0                     l163:	
  1098                           ;main.c: 526: case 0x05:
  1099                           
  1100                           
  1101                           ;main.c: 527: PORTBbits.RB2 = 1;
  1102  00A0  1506               	bsf	6,2	;volatile
  1103                           
  1104                           ;main.c: 528: PORTDbits.RD3 = 1;
  1105  00A1  1588               	bsf	8,3	;volatile
  1106                           
  1107                           ;main.c: 529: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1108  00A2  0843               	movf	_RxBuf+23,w
  1109  00A3  00E3               	movwf	??_Pr_UART_Data
  1110  00A4  01E4               	clrf	??_Pr_UART_Data+1
  1111  00A5  0844               	movf	_RxBuf+24,w
  1112  00A6  00E5               	movwf	??_Pr_UART_Data+2
  1113  00A7  01E6               	clrf	??_Pr_UART_Data+3
  1114  00A8  0865               	movf	??_Pr_UART_Data+2,w
  1115  00A9  00E6               	movwf	??_Pr_UART_Data+3
  1116  00AA  01E5               	clrf	??_Pr_UART_Data+2
  1117  00AB  0863               	movf	??_Pr_UART_Data,w
  1118  00AC  0465               	iorwf	??_Pr_UART_Data+2,w
  1119  00AD  00E7               	movwf	Pr_UART_Data@sensorVal
  1120  00AE  0864               	movf	??_Pr_UART_Data+1,w
  1121  00AF  0466               	iorwf	??_Pr_UART_Data+3,w
  1122  00B0  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1123                           
  1124                           ;main.c: 530: break;
  1125  00B1  0008               	return
  1126  00B2                     l164:	
  1127                           ;main.c: 531: case 0x06:
  1128                           
  1129                           
  1130                           ;main.c: 532: PORTBbits.RB3 = 1;
  1131  00B2  1586               	bsf	6,3	;volatile
  1132                           
  1133                           ;main.c: 533: PORTDbits.RD3 = 1;
  1134  00B3  1588               	bsf	8,3	;volatile
  1135                           
  1136                           ;main.c: 534: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1137  00B4  0843               	movf	_RxBuf+23,w
  1138  00B5  00E3               	movwf	??_Pr_UART_Data
  1139  00B6  01E4               	clrf	??_Pr_UART_Data+1
  1140  00B7  0844               	movf	_RxBuf+24,w
  1141  00B8  00E5               	movwf	??_Pr_UART_Data+2
  1142  00B9  01E6               	clrf	??_Pr_UART_Data+3
  1143  00BA  0865               	movf	??_Pr_UART_Data+2,w
  1144  00BB  00E6               	movwf	??_Pr_UART_Data+3
  1145  00BC  01E5               	clrf	??_Pr_UART_Data+2
  1146  00BD  0863               	movf	??_Pr_UART_Data,w
  1147  00BE  0465               	iorwf	??_Pr_UART_Data+2,w
  1148  00BF  00E7               	movwf	Pr_UART_Data@sensorVal
  1149  00C0  0864               	movf	??_Pr_UART_Data+1,w
  1150  00C1  0466               	iorwf	??_Pr_UART_Data+3,w
  1151  00C2  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1152                           
  1153                           ;main.c: 535: break;
  1154  00C3  0008               	return
  1155  00C4                     l165:	
  1156                           ;main.c: 536: case 0x07:
  1157                           
  1158                           
  1159                           ;main.c: 537: PORTBbits.RB4 = 1;
  1160  00C4  1606               	bsf	6,4	;volatile
  1161                           
  1162                           ;main.c: 538: PORTDbits.RD3 = 1;
  1163  00C5  1588               	bsf	8,3	;volatile
  1164                           
  1165                           ;main.c: 539: sensorVal = (RxBuf[24] << 8) | RxBuf[23] ;
  1166  00C6  0843               	movf	_RxBuf+23,w
  1167  00C7  00E3               	movwf	??_Pr_UART_Data
  1168  00C8  01E4               	clrf	??_Pr_UART_Data+1
  1169  00C9  0844               	movf	_RxBuf+24,w
  1170  00CA  00E5               	movwf	??_Pr_UART_Data+2
  1171  00CB  01E6               	clrf	??_Pr_UART_Data+3
  1172  00CC  0865               	movf	??_Pr_UART_Data+2,w
  1173  00CD  00E6               	movwf	??_Pr_UART_Data+3
  1174  00CE  01E5               	clrf	??_Pr_UART_Data+2
  1175  00CF  0863               	movf	??_Pr_UART_Data,w
  1176  00D0  0465               	iorwf	??_Pr_UART_Data+2,w
  1177  00D1  00E7               	movwf	Pr_UART_Data@sensorVal
  1178  00D2  0864               	movf	??_Pr_UART_Data+1,w
  1179  00D3  0466               	iorwf	??_Pr_UART_Data+3,w
  1180  00D4  00E8               	movwf	Pr_UART_Data@sensorVal+1
  1181                           
  1182                           ;main.c: 540: break;
  1183  00D5  0008               	return
  1184  00D6                     l166:	
  1185                           ;main.c: 541: default:
  1186                           
  1187                           
  1188                           ;main.c: 542: PORTBbits.RB5 = 1;
  1189  00D6  1686               	bsf	6,5	;volatile
  1190                           
  1191                           ;main.c: 544: }
  1192                           
  1193                           ;main.c: 543: break;
  1194  00D7  0008               	return
  1195  00D8                     l1056:	
  1196  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1197  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1198  00DA  0869               	movf	Pr_UART_Data@status,w
  1199                           
  1200                           ; Switch size 1, requested type "space"
  1201                           ; Number of cases is 6, Range of values is 0 to 7
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte           19    10 (average)
  1205                           ; direct_byte           23     7 (fixed)
  1206                           ; jumptable            260     6 (fixed)
  1207                           ;	Chosen strategy is simple_byte
  1208  00DB  3A00               	xorlw	0	; case 0
  1209  00DC  1903               	skipnz
  1210  00DD  286B               	goto	l159
  1211  00DE  3A01               	xorlw	1	; case 1
  1212  00DF  1903               	skipnz
  1213  00E0  287C               	goto	l161
  1214  00E1  3A03               	xorlw	3	; case 2
  1215  00E2  1903               	skipnz
  1216  00E3  288E               	goto	l162
  1217  00E4  3A07               	xorlw	7	; case 5
  1218  00E5  1903               	skipnz
  1219  00E6  28A0               	goto	l163
  1220  00E7  3A03               	xorlw	3	; case 6
  1221  00E8  1903               	skipnz
  1222  00E9  28B2               	goto	l164
  1223  00EA  3A01               	xorlw	1	; case 7
  1224  00EB  1903               	skipnz
  1225  00EC  28C4               	goto	l165
  1226  00ED  28D6               	goto	l166
  1227  00EE  0008               	return
  1228  00EF                     __end_of_Pr_UART_Data:	
  1229                           
  1230                           	psect	text4
  1231  020E                     __ptext4:	
  1232 ;; *************** function _generateCRC *****************
  1233 ;; Defined at:
  1234 ;;		line 194 in file "main.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  buf             1    wreg     PTR unsigned char 
  1237 ;;		 -> RxBuf(29), 
  1238 ;;  len             2   16[BANK0 ] int 
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  buf             1   21[BANK0 ] PTR unsigned char 
  1241 ;;		 -> RxBuf(29), 
  1242 ;;  i               2   24[BANK0 ] int 
  1243 ;;  crc             2   22[BANK0 ] unsigned short 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   16[BANK0 ] unsigned short 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1
  1253 ;;      Params:         0       2       0
  1254 ;;      Locals:         0       5       0
  1255 ;;      Temps:          0       3       0
  1256 ;;      Totals:         0      10       0
  1257 ;;Total ram usage:       10 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    2
  1260 ;; This function calls:
  1261 ;;		_calc_crc
  1262 ;; This function is called by:
  1263 ;;		_Pr_UART_Data
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function _generateCRC
  1269  020E                     _generateCRC:	
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _generateCRC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1273                           ;generateCRC@buf stored from wreg
  1274  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1275  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0210  00DE               	movwf	generateCRC@buf
  1277                           
  1278                           ;main.c: 196: unsigned short crc;
  1279                           ;main.c: 198: crc = 0xFFFF;
  1280  0211  30FF               	movlw	255
  1281  0212  00DF               	movwf	generateCRC@crc
  1282  0213  30FF               	movlw	255
  1283  0214  00E0               	movwf	generateCRC@crc+1
  1284                           
  1285                           ;main.c: 199: for(int i = 0; i<len-3; i++){
  1286  0215  01E1               	clrf	generateCRC@i
  1287  0216  01E2               	clrf	generateCRC@i+1
  1288  0217                     l940:	
  1289  0217  0859               	movf	generateCRC@len,w
  1290  0218  3EFD               	addlw	253
  1291  0219  00DB               	movwf	??_generateCRC
  1292  021A  085A               	movf	generateCRC@len+1,w
  1293  021B  1803               	skipnc
  1294  021C  3E01               	addlw	1
  1295  021D  3EFF               	addlw	255
  1296  021E  00DC               	movwf	??_generateCRC+1
  1297  021F  0862               	movf	generateCRC@i+1,w
  1298  0220  3A80               	xorlw	128
  1299  0221  00DD               	movwf	??_generateCRC+2
  1300  0222  085C               	movf	??_generateCRC+1,w
  1301  0223  3A80               	xorlw	128
  1302  0224  025D               	subwf	??_generateCRC+2,w
  1303  0225  1D03               	skipz
  1304  0226  2A29               	goto	u325
  1305  0227  085B               	movf	??_generateCRC,w
  1306  0228  0261               	subwf	generateCRC@i,w
  1307  0229                     u325:	
  1308  0229  1803               	btfsc	3,0
  1309  022A  2A4B               	goto	l942
  1310                           
  1311                           ;main.c: 200: crc = calc_crc(crc, buf[i]);
  1312  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1313  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1314  022D  0860               	movf	generateCRC@crc+1,w
  1315  022E  00CE               	movwf	calc_crc@crc_buff+1
  1316  022F  085F               	movf	generateCRC@crc,w
  1317  0230  00CD               	movwf	calc_crc@crc_buff
  1318  0231  0861               	movf	generateCRC@i,w
  1319  0232  075E               	addwf	generateCRC@buf,w
  1320  0233  00DB               	movwf	??_generateCRC
  1321  0234  085B               	movf	??_generateCRC,w
  1322  0235  0084               	movwf	4
  1323  0236  1383               	bcf	3,7	;select IRP bank0
  1324  0237  0800               	movf	0,w
  1325  0238  00DC               	movwf	??_generateCRC+1
  1326  0239  085C               	movf	??_generateCRC+1,w
  1327  023A  00CF               	movwf	calc_crc@input
  1328  023B  118A  2293  118A   	fcall	_calc_crc
  1329  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1330  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0240  084E               	movf	?_calc_crc+1,w
  1332  0241  00E0               	movwf	generateCRC@crc+1
  1333  0242  084D               	movf	?_calc_crc,w
  1334  0243  00DF               	movwf	generateCRC@crc
  1335  0244  3001               	movlw	1
  1336  0245  07E1               	addwf	generateCRC@i,f
  1337  0246  1803               	skipnc
  1338  0247  0AE2               	incf	generateCRC@i+1,f
  1339  0248  3000               	movlw	0
  1340  0249  07E2               	addwf	generateCRC@i+1,f
  1341  024A  2A17               	goto	l940
  1342  024B                     l942:	
  1343                           
  1344                           ;main.c: 201: }
  1345                           ;main.c: 202: return crc;
  1346  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1347  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1348  024D  0860               	movf	generateCRC@crc+1,w
  1349  024E  00DA               	movwf	?_generateCRC+1
  1350  024F  085F               	movf	generateCRC@crc,w
  1351  0250  00D9               	movwf	?_generateCRC
  1352  0251  0008               	return
  1353  0252                     __end_of_generateCRC:	
  1354                           
  1355                           	psect	text5
  1356  0293                     __ptext5:	
  1357 ;; *************** function _calc_crc *****************
  1358 ;; Defined at:
  1359 ;;		line 171 in file "main.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  crc_buff        2    4[BANK0 ] unsigned short 
  1362 ;;  input           1    6[BANK0 ] unsigned char 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  x16             2   13[BANK0 ] unsigned short 
  1365 ;;  i               1   15[BANK0 ] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  2    4[BANK0 ] unsigned short 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1
  1375 ;;      Params:         0       3       0
  1376 ;;      Locals:         0       3       0
  1377 ;;      Temps:          0       6       0
  1378 ;;      Totals:         0      12       0
  1379 ;;Total ram usage:       12 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_generateCRC
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _calc_crc
  1391  0293                     _calc_crc:	
  1392                           
  1393                           ;main.c: 173: unsigned char i;
  1394                           ;main.c: 174: unsigned short x16;
  1395                           ;main.c: 175: for (i=0; i<8; i++) {
  1396                           
  1397                           ;incstack = 0
  1398                           ; Regs used in _calc_crc: [wreg+status,2+status,0]
  1399  0293  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0294  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0295  01D8               	clrf	calc_crc@i
  1402  0296                     L1:	
  1403  0296  3008               	movlw	8
  1404  0297  0258               	subwf	calc_crc@i,w
  1405  0298  1803               	btfsc	3,0
  1406  0299  0008               	return
  1407                           
  1408                           ;main.c: 176: if( (crc_buff & 0x0001) ^ (input & 0x01) )
  1409  029A  084F               	movf	calc_crc@input,w
  1410  029B  3901               	andlw	1
  1411  029C  00D0               	movwf	??_calc_crc
  1412  029D  01D1               	clrf	??_calc_crc+1
  1413  029E  3001               	movlw	1
  1414  029F  054D               	andwf	calc_crc@crc_buff,w
  1415  02A0  00D2               	movwf	??_calc_crc+2
  1416  02A1  3000               	movlw	0
  1417  02A2  054E               	andwf	calc_crc@crc_buff+1,w
  1418  02A3  00D3               	movwf	??_calc_crc+3
  1419  02A4  0850               	movf	??_calc_crc,w
  1420  02A5  0652               	xorwf	??_calc_crc+2,w
  1421  02A6  00D4               	movwf	??_calc_crc+4
  1422  02A7  0851               	movf	??_calc_crc+1,w
  1423  02A8  0653               	xorwf	??_calc_crc+3,w
  1424  02A9  00D5               	movwf	??_calc_crc+5
  1425  02AA  0854               	movf	??_calc_crc+4,w
  1426  02AB  0455               	iorwf	??_calc_crc+5,w
  1427  02AC  1903               	btfsc	3,2
  1428  02AD  2AB3               	goto	l920
  1429                           
  1430                           ;main.c: 177: x16 = 0x8408;
  1431  02AE  3008               	movlw	8
  1432  02AF  00D6               	movwf	calc_crc@x16
  1433  02B0  3084               	movlw	132
  1434  02B1  00D7               	movwf	calc_crc@x16+1
  1435  02B2  2AB5               	goto	l922
  1436  02B3                     l920:	
  1437                           
  1438                           ;main.c: 178: else
  1439                           ;main.c: 179: x16 = 0x0000;
  1440  02B3  01D6               	clrf	calc_crc@x16
  1441  02B4  01D7               	clrf	calc_crc@x16+1
  1442  02B5                     l922:	
  1443                           
  1444                           ;main.c: 180: crc_buff = crc_buff >> 1;
  1445  02B5  084E               	movf	calc_crc@crc_buff+1,w
  1446  02B6  00D1               	movwf	??_calc_crc+1
  1447  02B7  084D               	movf	calc_crc@crc_buff,w
  1448  02B8  00D0               	movwf	??_calc_crc
  1449  02B9  1003               	clrc
  1450  02BA  0CD1               	rrf	??_calc_crc+1,f
  1451  02BB  0CD0               	rrf	??_calc_crc,f
  1452  02BC  0850               	movf	??_calc_crc,w
  1453  02BD  00CD               	movwf	calc_crc@crc_buff
  1454  02BE  0851               	movf	??_calc_crc+1,w
  1455  02BF  00CE               	movwf	calc_crc@crc_buff+1
  1456                           
  1457                           ;main.c: 181: crc_buff ^= x16;
  1458  02C0  0856               	movf	calc_crc@x16,w
  1459  02C1  06CD               	xorwf	calc_crc@crc_buff,f
  1460  02C2  0857               	movf	calc_crc@x16+1,w
  1461  02C3  06CE               	xorwf	calc_crc@crc_buff+1,f
  1462                           
  1463                           ;main.c: 182: input = input >> 1;
  1464  02C4  084F               	movf	calc_crc@input,w
  1465  02C5  00D0               	movwf	??_calc_crc
  1466  02C6  1003               	clrc
  1467  02C7  0C50               	rrf	??_calc_crc,w
  1468  02C8  00D1               	movwf	??_calc_crc+1
  1469  02C9  0851               	movf	??_calc_crc+1,w
  1470  02CA  00CF               	movwf	calc_crc@input
  1471  02CB  3001               	movlw	1
  1472  02CC  00D0               	movwf	??_calc_crc
  1473  02CD  0850               	movf	??_calc_crc,w
  1474  02CE  07D8               	addwf	calc_crc@i,f
  1475  02CF  2A96               	goto	L1
  1476  02D0                     __end_of_calc_crc:	
  1477                           ;main.c: 183: }
  1478                           ;main.c: 184: return(crc_buff);
  1479                           
  1480                           
  1481                           	psect	text6
  1482  0394                     __ptext6:	
  1483 ;; *************** function _TurnOffRelays *****************
  1484 ;; Defined at:
  1485 ;;		line 459 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;		None               void
  1492 ;; Registers used:
  1493 ;;		None
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1
  1499 ;;      Params:         0       0       0
  1500 ;;      Locals:         0       0       0
  1501 ;;      Temps:          0       0       0
  1502 ;;      Totals:         0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_Pr_UART_Data
  1510 ;;		_TestRelays
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           
  1515                           ;psect for function _TurnOffRelays
  1516  0394                     _TurnOffRelays:	
  1517                           
  1518                           ;main.c: 460: PORTDbits.RD3 = 0;
  1519                           
  1520                           ;incstack = 0
  1521                           ; Regs used in _TurnOffRelays: []
  1522  0394  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0395  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0396  1188               	bcf	8,3	;volatile
  1525                           
  1526                           ;main.c: 461: PORTBbits.RB0 = 0;
  1527  0397  1006               	bcf	6,0	;volatile
  1528                           
  1529                           ;main.c: 462: PORTBbits.RB1 = 0;
  1530  0398  1086               	bcf	6,1	;volatile
  1531                           
  1532                           ;main.c: 463: PORTBbits.RB2 = 0;
  1533  0399  1106               	bcf	6,2	;volatile
  1534                           
  1535                           ;main.c: 464: PORTBbits.RB3 = 0;
  1536  039A  1186               	bcf	6,3	;volatile
  1537                           
  1538                           ;main.c: 465: PORTBbits.RB4 = 0;
  1539  039B  1206               	bcf	6,4	;volatile
  1540                           
  1541                           ;main.c: 466: PORTDbits.RD2 = 0;
  1542  039C  1108               	bcf	8,2	;volatile
  1543                           
  1544                           ;main.c: 467: PORTBbits.RB5 = 0;
  1545  039D  1286               	bcf	6,5	;volatile
  1546  039E  0008               	return
  1547  039F                     __end_of_TurnOffRelays:	
  1548                           
  1549                           	psect	text7
  1550  02D0                     __ptext7:	
  1551 ;; *************** function _PollSensor *****************
  1552 ;; Defined at:
  1553 ;;		line 313 in file "main.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  i               2    5[BANK0 ] int 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;		None               void
  1560 ;; Registers used:
  1561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMMON   BANK0   BANK1
  1567 ;;      Params:         0       0       0
  1568 ;;      Locals:         0       2       0
  1569 ;;      Temps:          0       0       0
  1570 ;;      Totals:         0       2       0
  1571 ;;Total ram usage:        2 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    2
  1574 ;; This function calls:
  1575 ;;		_UART_putc
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           
  1582                           ;psect for function _PollSensor
  1583  02D0                     _PollSensor:	
  1584                           
  1585                           ;main.c: 315: RxPtr = 0;
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _PollSensor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1589  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  1590  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  1591  02D2  01A9               	clrf	_RxPtr
  1592                           
  1593                           ;main.c: 317: for(int i = 0; i<19; i++){
  1594  02D3  01CE               	clrf	PollSensor@i
  1595  02D4  01CF               	clrf	PollSensor@i+1
  1596  02D5  084F               	movf	PollSensor@i+1,w
  1597  02D6  3A80               	xorlw	128
  1598  02D7  00FF               	movwf	127
  1599  02D8  3080               	movlw	128
  1600  02D9  027F               	subwf	127,w
  1601  02DA  1D03               	skipz
  1602  02DB  2ADE               	goto	u435
  1603  02DC  3013               	movlw	19
  1604  02DD  024E               	subwf	PollSensor@i,w
  1605  02DE                     u435:	
  1606  02DE  1803               	btfsc	3,0
  1607  02DF  2AFD               	goto	l131
  1608  02E0                     l1064:	
  1609                           
  1610                           ;main.c: 318: UART_putc(TxBuf[i]);
  1611  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1612  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1613  02E2  084E               	movf	PollSensor@i,w
  1614  02E3  3EA0               	addlw	(low (_TxBuf| 0))& (0+255)
  1615  02E4  0084               	movwf	4
  1616  02E5  1383               	bcf	3,7	;select IRP bank1
  1617  02E6  0800               	movf	0,w
  1618  02E7  118A  2388  118A   	fcall	_UART_putc
  1619  02EA  3001               	movlw	1
  1620  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1621  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1622  02ED  07CE               	addwf	PollSensor@i,f
  1623  02EE  1803               	skipnc
  1624  02EF  0ACF               	incf	PollSensor@i+1,f
  1625  02F0  3000               	movlw	0
  1626  02F1  07CF               	addwf	PollSensor@i+1,f
  1627  02F2  084F               	movf	PollSensor@i+1,w
  1628  02F3  3A80               	xorlw	128
  1629  02F4  00FF               	movwf	127
  1630  02F5  3080               	movlw	128
  1631  02F6  027F               	subwf	127,w
  1632  02F7  1D03               	skipz
  1633  02F8  2AFB               	goto	u445
  1634  02F9  3013               	movlw	19
  1635  02FA  024E               	subwf	PollSensor@i,w
  1636  02FB                     u445:	
  1637  02FB  1C03               	skipc
  1638  02FC  2AE0               	goto	l1064
  1639  02FD                     l131:	
  1640                           
  1641                           ;main.c: 319: }
  1642                           ;main.c: 320: PORTCbits.RC1 = 1;
  1643  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1644  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1645  02FF  1487               	bsf	7,1	;volatile
  1646                           
  1647                           ;main.c: 321: RedLED_timer = 100;
  1648  0300  3064               	movlw	100
  1649  0301  00A2               	movwf	_RedLED_timer
  1650  0302  3000               	movlw	0
  1651  0303  00A3               	movwf	_RedLED_timer+1
  1652  0304  0008               	return
  1653  0305                     __end_of_PollSensor:	
  1654                           
  1655                           	psect	text8
  1656  0388                     __ptext8:	
  1657 ;; *************** function _UART_putc *****************
  1658 ;; Defined at:
  1659 ;;		line 331 in file "main.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  c               1    wreg     unsigned char 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  c               1    4[BANK0 ] unsigned char 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;		None               void
  1666 ;; Registers used:
  1667 ;;		wreg
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMMON   BANK0   BANK1
  1673 ;;      Params:         0       0       0
  1674 ;;      Locals:         0       1       0
  1675 ;;      Temps:          0       0       0
  1676 ;;      Totals:         0       1       0
  1677 ;;Total ram usage:        1 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    1
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_PollSensor
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _UART_putc
  1689  0388                     _UART_putc:	
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _UART_putc: [wreg]
  1693                           ;UART_putc@c stored from wreg
  1694  0388  1283               	bcf	3,5	;RP0=0, select bank0
  1695  0389  1303               	bcf	3,6	;RP1=0, select bank0
  1696  038A  00CD               	movwf	UART_putc@c
  1697  038B                     l135:	
  1698                           ;main.c: 334: while (TXSTAbits.TRMT == 0);
  1699                           
  1700  038B  1683               	bsf	3,5	;RP0=1, select bank1
  1701  038C  1303               	bcf	3,6	;RP1=0, select bank1
  1702  038D  1C98               	btfss	24,1	;volatile
  1703  038E  2B8B               	goto	l135
  1704                           
  1705                           ;main.c: 336: TXREG = c;
  1706  038F  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0390  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0391  084D               	movf	UART_putc@c,w
  1709  0392  0099               	movwf	25	;volatile
  1710  0393  0008               	return
  1711  0394                     __end_of_UART_putc:	
  1712                           
  1713                           	psect	text9
  1714  037B                     __ptext9:	
  1715 ;; *************** function _Init_UART *****************
  1716 ;; Defined at:
  1717 ;;		line 212 in file "main.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;		None               void
  1724 ;; Registers used:
  1725 ;;		wreg
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1
  1731 ;;      Params:         0       0       0
  1732 ;;      Locals:         0       0       0
  1733 ;;      Temps:          0       0       0
  1734 ;;      Totals:         0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _Init_UART
  1747  037B                     _Init_UART:	
  1748                           
  1749                           ;main.c: 214: TXSTAbits.BRGH = 1;
  1750                           
  1751                           ;incstack = 0
  1752                           ; Regs used in _Init_UART: [wreg]
  1753  037B  1683               	bsf	3,5	;RP0=1, select bank1
  1754  037C  1303               	bcf	3,6	;RP1=0, select bank1
  1755  037D  1518               	bsf	24,2	;volatile
  1756                           
  1757                           ;main.c: 215: TXSTAbits.TXEN = 1;
  1758  037E  1698               	bsf	24,5	;volatile
  1759                           
  1760                           ;main.c: 217: RCSTAbits.SPEN = 1;
  1761  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1762  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1763  0381  1798               	bsf	24,7	;volatile
  1764                           
  1765                           ;main.c: 218: RCSTAbits.CREN = 1;
  1766  0382  1618               	bsf	24,4	;volatile
  1767                           
  1768                           ;main.c: 220: SPBRG = 47;
  1769  0383  302F               	movlw	47
  1770  0384  1683               	bsf	3,5	;RP0=1, select bank1
  1771  0385  1303               	bcf	3,6	;RP1=0, select bank1
  1772  0386  0099               	movwf	25	;volatile
  1773  0387  0008               	return
  1774  0388                     __end_of_Init_UART:	
  1775                           
  1776                           	psect	text10
  1777  0348                     __ptext10:	
  1778 ;; *************** function _InitTimer *****************
  1779 ;; Defined at:
  1780 ;;		line 236 in file "main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1
  1794 ;;      Params:         0       0       0
  1795 ;;      Locals:         0       0       0
  1796 ;;      Temps:          0       0       0
  1797 ;;      Totals:         0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _InitTimer
  1810  0348                     _InitTimer:	
  1811                           
  1812                           ;main.c: 238: T1CON = 0x01;
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _InitTimer: [wreg]
  1816  0348  3001               	movlw	1
  1817  0349  1283               	bcf	3,5	;RP0=0, select bank0
  1818  034A  1303               	bcf	3,6	;RP1=0, select bank0
  1819  034B  0090               	movwf	16	;volatile
  1820                           
  1821                           ;main.c: 239: TMR1L = 0x099;
  1822  034C  3099               	movlw	153
  1823  034D  008E               	movwf	14	;volatile
  1824                           
  1825                           ;main.c: 240: TMR1H = 0x0F1;
  1826  034E  30F1               	movlw	241
  1827  034F  008F               	movwf	15	;volatile
  1828                           
  1829                           ;main.c: 242: PIE1bits.TMR1IE = 1;
  1830  0350  1683               	bsf	3,5	;RP0=1, select bank1
  1831  0351  1303               	bcf	3,6	;RP1=0, select bank1
  1832  0352  140C               	bsf	12,0	;volatile
  1833                           
  1834                           ;main.c: 243: INTCONbits.PEIE = 1;
  1835  0353  170B               	bsf	11,6	;volatile
  1836                           
  1837                           ;main.c: 244: INTCONbits.GIE = 1;
  1838  0354  178B               	bsf	11,7	;volatile
  1839                           
  1840                           ;main.c: 245: T1CONbits.TMR1ON = 1;
  1841  0355  1283               	bcf	3,5	;RP0=0, select bank0
  1842  0356  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0357  1410               	bsf	16,0	;volatile
  1844                           
  1845                           ;main.c: 246: T1CONbits.T1CKPS0 = 0;
  1846  0358  1210               	bcf	16,4	;volatile
  1847                           
  1848                           ;main.c: 247: T1CONbits.T1CKPS1 = 0;
  1849  0359  1290               	bcf	16,5	;volatile
  1850  035A  0008               	return
  1851  035B                     __end_of_InitTimer:	
  1852                           
  1853                           	psect	text11
  1854  00EF                     __ptext11:	
  1855 ;; *************** function _InitPorts *****************
  1856 ;; Defined at:
  1857 ;;		line 346 in file "main.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;		None               void
  1864 ;; Registers used:
  1865 ;;		wreg
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1
  1871 ;;      Params:         0       0       0
  1872 ;;      Locals:         0       0       0
  1873 ;;      Temps:          0       0       0
  1874 ;;      Totals:         0       0       0
  1875 ;;Total ram usage:        0 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    1
  1878 ;; This function calls:
  1879 ;;		Nothing
  1880 ;; This function is called by:
  1881 ;;		_main
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           
  1886                           ;psect for function _InitPorts
  1887  00EF                     _InitPorts:	
  1888                           
  1889                           ;main.c: 348: TRISCbits.TRISC0 = 0;
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in _InitPorts: [wreg]
  1893  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1894  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1895  00F1  1007               	bcf	7,0	;volatile
  1896                           
  1897                           ;main.c: 349: PORTCbits.RC0 = 0;
  1898  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1899  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1900  00F4  1007               	bcf	7,0	;volatile
  1901                           
  1902                           ;main.c: 351: TRISCbits.TRISC1 = 0;
  1903  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  1904  00F6  1303               	bcf	3,6	;RP1=0, select bank1
  1905  00F7  1087               	bcf	7,1	;volatile
  1906                           
  1907                           ;main.c: 352: PORTCbits.RC1 = 0;
  1908  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1909  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  1910  00FA  1087               	bcf	7,1	;volatile
  1911                           
  1912                           ;main.c: 355: TRISDbits.TRISD2 = 0;
  1913  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  1914  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  1915  00FD  1108               	bcf	8,2	;volatile
  1916                           
  1917                           ;main.c: 356: PORTDbits.RD2 = 0;
  1918  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1919  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1920  0100  1108               	bcf	8,2	;volatile
  1921                           
  1922                           ;main.c: 357: TRISBbits.TRISB0 = 0;
  1923  0101  1683               	bsf	3,5	;RP0=1, select bank1
  1924  0102  1303               	bcf	3,6	;RP1=0, select bank1
  1925  0103  1006               	bcf	6,0	;volatile
  1926                           
  1927                           ;main.c: 358: PORTBbits.RB0 = 0;
  1928  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0106  1006               	bcf	6,0	;volatile
  1931                           
  1932                           ;main.c: 359: TRISBbits.TRISB1 = 0;
  1933  0107  1683               	bsf	3,5	;RP0=1, select bank1
  1934  0108  1303               	bcf	3,6	;RP1=0, select bank1
  1935  0109  1086               	bcf	6,1	;volatile
  1936                           
  1937                           ;main.c: 360: PORTBbits.RB1 = 0;
  1938  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1939  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1940  010C  1086               	bcf	6,1	;volatile
  1941                           
  1942                           ;main.c: 361: TRISBbits.TRISB2 = 0;
  1943  010D  1683               	bsf	3,5	;RP0=1, select bank1
  1944  010E  1303               	bcf	3,6	;RP1=0, select bank1
  1945  010F  1106               	bcf	6,2	;volatile
  1946                           
  1947                           ;main.c: 362: PORTBbits.RB2 = 0;
  1948  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0111  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0112  1106               	bcf	6,2	;volatile
  1951                           
  1952                           ;main.c: 363: TRISBbits.TRISB3 = 0;
  1953  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1954  0114  1303               	bcf	3,6	;RP1=0, select bank1
  1955  0115  1186               	bcf	6,3	;volatile
  1956                           
  1957                           ;main.c: 364: PORTBbits.RB3 = 0;
  1958  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0118  1186               	bcf	6,3	;volatile
  1961                           
  1962                           ;main.c: 365: TRISBbits.TRISB4 = 0;
  1963  0119  1683               	bsf	3,5	;RP0=1, select bank1
  1964  011A  1303               	bcf	3,6	;RP1=0, select bank1
  1965  011B  1206               	bcf	6,4	;volatile
  1966                           
  1967                           ;main.c: 366: PORTBbits.RB4 = 0;
  1968  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1969  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1970  011E  1206               	bcf	6,4	;volatile
  1971                           
  1972                           ;main.c: 367: TRISDbits.TRISD3 = 0;
  1973  011F  1683               	bsf	3,5	;RP0=1, select bank1
  1974  0120  1303               	bcf	3,6	;RP1=0, select bank1
  1975  0121  1188               	bcf	8,3	;volatile
  1976                           
  1977                           ;main.c: 368: PORTDbits.RD3 = 0;
  1978  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0124  1188               	bcf	8,3	;volatile
  1981                           
  1982                           ;main.c: 369: TRISBbits.TRISB5 = 0;
  1983  0125  1683               	bsf	3,5	;RP0=1, select bank1
  1984  0126  1303               	bcf	3,6	;RP1=0, select bank1
  1985  0127  1286               	bcf	6,5	;volatile
  1986                           
  1987                           ;main.c: 370: PORTBbits.RB5 = 0;
  1988  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0129  1303               	bcf	3,6	;RP1=0, select bank0
  1990  012A  1286               	bcf	6,5	;volatile
  1991                           
  1992                           ;main.c: 372: PORTCbits.RC3 = 0;
  1993  012B  1187               	bcf	7,3	;volatile
  1994                           
  1995                           ;main.c: 373: TRISCbits.TRISC3 = 0;
  1996  012C  1683               	bsf	3,5	;RP0=1, select bank1
  1997  012D  1303               	bcf	3,6	;RP1=0, select bank1
  1998  012E  1187               	bcf	7,3	;volatile
  1999                           
  2000                           ;main.c: 375: PORTCbits.RC5 = 0;
  2001  012F  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0130  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0131  1287               	bcf	7,5	;volatile
  2004                           
  2005                           ;main.c: 376: TRISCbits.TRISC5 = 0;
  2006  0132  1683               	bsf	3,5	;RP0=1, select bank1
  2007  0133  1303               	bcf	3,6	;RP1=0, select bank1
  2008  0134  1287               	bcf	7,5	;volatile
  2009                           
  2010                           ;main.c: 378: PORTAbits.RA0 = 1;
  2011  0135  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0136  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0137  1405               	bsf	5,0	;volatile
  2014                           
  2015                           ;main.c: 379: TRISAbits.TRISA0 = 0;
  2016  0138  1683               	bsf	3,5	;RP0=1, select bank1
  2017  0139  1303               	bcf	3,6	;RP1=0, select bank1
  2018  013A  1005               	bcf	5,0	;volatile
  2019                           
  2020                           ;main.c: 381: PORTAbits.RA2 = 1;
  2021  013B  1283               	bcf	3,5	;RP0=0, select bank0
  2022  013C  1303               	bcf	3,6	;RP1=0, select bank0
  2023  013D  1505               	bsf	5,2	;volatile
  2024                           
  2025                           ;main.c: 382: TRISAbits.TRISA2 = 0;
  2026  013E  1683               	bsf	3,5	;RP0=1, select bank1
  2027  013F  1303               	bcf	3,6	;RP1=0, select bank1
  2028  0140  1105               	bcf	5,2	;volatile
  2029                           
  2030                           ;main.c: 385: TRISEbits.TRISE1 = 0;
  2031  0141  1089               	bcf	9,1	;volatile
  2032                           
  2033                           ;main.c: 386: PORTEbits.RE1 = 0;
  2034  0142  1283               	bcf	3,5	;RP0=0, select bank0
  2035  0143  1303               	bcf	3,6	;RP1=0, select bank0
  2036  0144  1089               	bcf	9,1	;volatile
  2037                           
  2038                           ;main.c: 388: TRISEbits.TRISE2 = 0;
  2039  0145  1683               	bsf	3,5	;RP0=1, select bank1
  2040  0146  1303               	bcf	3,6	;RP1=0, select bank1
  2041  0147  1109               	bcf	9,2	;volatile
  2042                           
  2043                           ;main.c: 389: PORTEbits.RE2 = 0;
  2044  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2045  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2046  014A  1109               	bcf	9,2	;volatile
  2047                           
  2048                           ;main.c: 392: TRISCbits.TRISC5 = 0;
  2049  014B  1683               	bsf	3,5	;RP0=1, select bank1
  2050  014C  1303               	bcf	3,6	;RP1=0, select bank1
  2051  014D  1287               	bcf	7,5	;volatile
  2052                           
  2053                           ;main.c: 393: PORTCbits.RC5 = 0;
  2054  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2055  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0150  1287               	bcf	7,5	;volatile
  2057                           
  2058                           ;main.c: 395: TRISCbits.TRISC3 = 0;
  2059  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2060  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2061  0153  1187               	bcf	7,3	;volatile
  2062                           
  2063                           ;main.c: 396: PORTCbits.RC3 = 0;
  2064  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0156  1187               	bcf	7,3	;volatile
  2067                           
  2068                           ;main.c: 398: TRISAbits.TRISA0 = 0;
  2069  0157  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0158  1303               	bcf	3,6	;RP1=0, select bank1
  2071  0159  1005               	bcf	5,0	;volatile
  2072                           
  2073                           ;main.c: 399: PORTAbits.RA0 = 1;
  2074  015A  1283               	bcf	3,5	;RP0=0, select bank0
  2075  015B  1303               	bcf	3,6	;RP1=0, select bank0
  2076  015C  1405               	bsf	5,0	;volatile
  2077                           
  2078                           ;main.c: 401: TRISAbits.TRISA5 = 0;
  2079  015D  1683               	bsf	3,5	;RP0=1, select bank1
  2080  015E  1303               	bcf	3,6	;RP1=0, select bank1
  2081  015F  1285               	bcf	5,5	;volatile
  2082                           
  2083                           ;main.c: 402: PORTAbits.RA5 = 1;
  2084  0160  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0161  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0162  1685               	bsf	5,5	;volatile
  2087                           
  2088                           ;main.c: 407: ADCON1 = 6;
  2089  0163  3006               	movlw	6
  2090  0164  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0165  1303               	bcf	3,6	;RP1=0, select bank1
  2092  0166  009F               	movwf	31	;volatile
  2093  0167  0008               	return
  2094  0168                     __end_of_InitPorts:	
  2095                           
  2096                           	psect	text12
  2097  0168                     __ptext12:	
  2098 ;; *************** function _isr *****************
  2099 ;; Defined at:
  2100 ;;		line 257 in file "main.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;		None
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;		None               void
  2107 ;; Registers used:
  2108 ;;		wreg, status,2, status,0, btemp+1
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMMON   BANK0   BANK1
  2114 ;;      Params:         0       0       0
  2115 ;;      Locals:         0       0       0
  2116 ;;      Temps:          0       4       0
  2117 ;;      Totals:         0       4       0
  2118 ;;Total ram usage:        4 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		Interrupt level 1
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           
  2128                           ;psect for function _isr
  2129  0168                     _isr:	
  2130                           
  2131                           ;main.c: 259: static int Count=0;
  2132                           ;main.c: 262: if (PIR1bits.TMR1IF)
  2133  0168  1C0C               	btfss	12,0	;volatile
  2134  0169  29BF               	goto	i1l127
  2135                           
  2136                           ;main.c: 263: {
  2137                           ;main.c: 264: PIR1bits.TMR1IF = 0;
  2138  016A  100C               	bcf	12,0	;volatile
  2139                           
  2140                           ;main.c: 265: TMR1L = 0x099;
  2141  016B  3099               	movlw	153
  2142  016C  008E               	movwf	14	;volatile
  2143                           
  2144                           ;main.c: 266: TMR1H = 0x0F1;
  2145  016D  30F1               	movlw	241
  2146  016E  008F               	movwf	15	;volatile
  2147                           
  2148                           ;main.c: 268: if (++Count > 999)
  2149  016F  3001               	movlw	1
  2150  0170  07A6               	addwf	isr@Count,f
  2151  0171  1803               	skipnc
  2152  0172  0AA7               	incf	isr@Count+1,f
  2153  0173  3000               	movlw	0
  2154  0174  07A7               	addwf	isr@Count+1,f
  2155  0175  0827               	movf	isr@Count+1,w
  2156  0176  3A80               	xorlw	128
  2157  0177  00FF               	movwf	127
  2158  0178  3083               	movlw	131
  2159  0179  027F               	subwf	127,w
  2160  017A  1D03               	skipz
  2161  017B  297E               	goto	u49_25
  2162  017C  30E8               	movlw	232
  2163  017D  0226               	subwf	isr@Count,w
  2164  017E                     u49_25:	
  2165  017E  1C03               	skipc
  2166  017F  2986               	goto	i1l1106
  2167                           
  2168                           ;main.c: 269: {
  2169                           ;main.c: 270: Count = 0;
  2170  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2171  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2172  0182  01A6               	clrf	isr@Count
  2173  0183  01A7               	clrf	isr@Count+1
  2174                           
  2175                           ;main.c: 271: SecondInterrupt = 1;
  2176  0184  01AB               	clrf	_SecondInterrupt
  2177  0185  0AAB               	incf	_SecondInterrupt,f
  2178  0186                     i1l1106:	
  2179                           
  2180                           ;main.c: 272: }
  2181                           ;main.c: 275: if (RxTimer)
  2182  0186  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0187  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0188  082A               	movf	_RxTimer,w
  2185  0189  1903               	btfsc	3,2
  2186  018A  2996               	goto	i1l1116
  2187                           
  2188                           ;main.c: 276: {
  2189                           ;main.c: 277: if (!--RxTimer){
  2190  018B  3001               	movlw	1
  2191  018C  02AA               	subwf	_RxTimer,f
  2192  018D  1D03               	btfss	3,2
  2193  018E  2996               	goto	i1l1116
  2194                           
  2195                           ;main.c: 278: PrRxMsg = 1;
  2196  018F  01A8               	clrf	_PrRxMsg
  2197  0190  0AA8               	incf	_PrRxMsg,f
  2198                           
  2199                           ;main.c: 279: Rx_OK = 1;
  2200  0191  3001               	movlw	1
  2201  0192  00A4               	movwf	_Rx_OK
  2202  0193  3000               	movlw	0
  2203  0194  00A5               	movwf	_Rx_OK+1
  2204                           
  2205                           ;main.c: 280: RxPtr = 0;
  2206  0195  01A9               	clrf	_RxPtr
  2207  0196                     i1l1116:	
  2208                           
  2209                           ;main.c: 281: }
  2210                           ;main.c: 282: }
  2211                           ;main.c: 284: if (RedLED_timer)
  2212  0196  0822               	movf	_RedLED_timer,w
  2213  0197  0423               	iorwf	_RedLED_timer+1,w
  2214  0198  1903               	btfsc	3,2
  2215  0199  29B1               	goto	i1l1130
  2216                           
  2217                           ;main.c: 285: {
  2218                           ;main.c: 286: if (!--RedLED_timer){
  2219  019A  3001               	movlw	1
  2220  019B  02A2               	subwf	_RedLED_timer,f
  2221  019C  3000               	movlw	0
  2222  019D  1C03               	skipc
  2223  019E  03A3               	decf	_RedLED_timer+1,f
  2224  019F  02A3               	subwf	_RedLED_timer+1,f
  2225  01A0  0822               	movf	_RedLED_timer,w
  2226  01A1  0423               	iorwf	_RedLED_timer+1,w
  2227  01A2  1D03               	btfss	3,2
  2228  01A3  29B1               	goto	i1l1130
  2229                           
  2230                           ;main.c: 287: PORTCbits.RC1 = 0;
  2231  01A4  1087               	bcf	7,1	;volatile
  2232                           
  2233                           ;main.c: 288: PORTCbits.RC0 = 0;
  2234  01A5  1007               	bcf	7,0	;volatile
  2235                           
  2236                           ;main.c: 289: if(Rx_OK){
  2237  01A6  0824               	movf	_Rx_OK,w
  2238  01A7  0425               	iorwf	_Rx_OK+1,w
  2239  01A8  1903               	btfsc	3,2
  2240  01A9  29B1               	goto	i1l1130
  2241                           
  2242                           ;main.c: 290: Rx_OK = 0;
  2243  01AA  01A4               	clrf	_Rx_OK
  2244  01AB  01A5               	clrf	_Rx_OK+1
  2245                           
  2246                           ;main.c: 291: PORTCbits.RC0 = 1;
  2247  01AC  1407               	bsf	7,0	;volatile
  2248                           
  2249                           ;main.c: 292: GreenLED_timer = 100;
  2250  01AD  3064               	movlw	100
  2251  01AE  00A0               	movwf	_GreenLED_timer
  2252  01AF  3000               	movlw	0
  2253  01B0  00A1               	movwf	_GreenLED_timer+1
  2254  01B1                     i1l1130:	
  2255                           
  2256                           ;main.c: 293: }
  2257                           ;main.c: 294: }
  2258                           ;main.c: 295: }
  2259                           ;main.c: 297: if (GreenLED_timer)
  2260  01B1  0820               	movf	_GreenLED_timer,w
  2261  01B2  0421               	iorwf	_GreenLED_timer+1,w
  2262  01B3  1903               	btfsc	3,2
  2263  01B4  29BF               	goto	i1l127
  2264                           
  2265                           ;main.c: 298: {
  2266                           ;main.c: 299: if (!--GreenLED_timer){
  2267  01B5  3001               	movlw	1
  2268  01B6  02A0               	subwf	_GreenLED_timer,f
  2269  01B7  3000               	movlw	0
  2270  01B8  1C03               	skipc
  2271  01B9  03A1               	decf	_GreenLED_timer+1,f
  2272  01BA  02A1               	subwf	_GreenLED_timer+1,f
  2273  01BB  0820               	movf	_GreenLED_timer,w
  2274  01BC  0421               	iorwf	_GreenLED_timer+1,w
  2275  01BD  1903               	btfsc	3,2
  2276                           
  2277                           ;main.c: 300: PORTCbits.RC0 = 0;
  2278  01BE  1007               	bcf	7,0	;volatile
  2279  01BF                     i1l127:	
  2280  01BF  084C               	movf	??_isr+3,w
  2281  01C0  00FF               	movwf	127
  2282  01C1  084B               	movf	??_isr+2,w
  2283  01C2  008A               	movwf	10
  2284  01C3  084A               	movf	??_isr+1,w
  2285  01C4  0084               	movwf	4
  2286  01C5  0E49               	swapf	??_isr^0,w
  2287  01C6  0083               	movwf	3
  2288  01C7  0EFE               	swapf	126,f
  2289  01C8  0E7E               	swapf	126,w
  2290  01C9  0009               	retfie
  2291  01CA                     __end_of_isr:	
  2292  007E                     btemp	set	126	;btemp
  2293  007E                     wtemp	set	126
  2294  007E                     wtemp0	set	126
  2295  0080                     wtemp1	set	128
  2296  0082                     wtemp2	set	130
  2297  0084                     wtemp3	set	132
  2298  0086                     wtemp4	set	134
  2299  0088                     wtemp5	set	136
  2300  007F                     wtemp6	set	127
  2301  007E                     ttemp	set	126
  2302  007E                     ttemp0	set	126
  2303  0081                     ttemp1	set	129
  2304  0084                     ttemp2	set	132
  2305  0087                     ttemp3	set	135
  2306  007F                     ttemp4	set	127
  2307  007E                     ltemp	set	126
  2308  007E                     ltemp0	set	126
  2309  0082                     ltemp1	set	130
  2310  0086                     ltemp2	set	134
  2311  0080                     ltemp3	set	128
  2312                           
  2313                           	psect	intentry
  2314  0004                     __pintentry:	
  2315                           ;incstack = 0
  2316                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1]
  2317                           
  2318  0004                     interrupt_function:	
  2319  007E                     saved_w	set	btemp
  2320  0004  00FE               	movwf	btemp
  2321  0005  0E03               	swapf	3,w
  2322  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2323  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2324  0008  00C9               	movwf	??_isr
  2325  0009  0804               	movf	4,w
  2326  000A  00CA               	movwf	??_isr+1
  2327  000B  080A               	movf	10,w
  2328  000C  00CB               	movwf	??_isr+2
  2329  000D  087F               	movf	btemp+1,w
  2330  000E  00CC               	movwf	??_isr+3
  2331  000F  118A  2968         	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     36      78
    BANK1            94      0      19

Pointer List with Targets:

    generateCRC@buf	PTR unsigned char  size(1) Largest target is 29
		 -> RxBuf(BANK0[29]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Pr_UART_Data
    _Pr_UART_Data->_generateCRC
    _generateCRC->_calc_crc
    _PollSensor->_UART_putc

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     741
                                             35 BANK0      1     1      0
                          _InitPorts
                          _InitTimer
                          _Init_UART
                         _PollSensor
                       _Pr_UART_Data
                          _Read_UART
                         _TestRelays
 ---------------------------------------------------------------------------------
 (1) _TestRelays                                           2     2      0      45
                                              4 BANK0      2     2      0
                      _TurnOffRelays
 ---------------------------------------------------------------------------------
 (1) _Read_UART                                            2     2      0      27
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Pr_UART_Data                                         9     9      0     579
                                             26 BANK0      9     9      0
                      _TurnOffRelays
                        _generateCRC
 ---------------------------------------------------------------------------------
 (2) _generateCRC                                         10     8      2     505
                                             16 BANK0     10     8      2
                           _calc_crc
 ---------------------------------------------------------------------------------
 (3) _calc_crc                                            12     9      3     289
                                              4 BANK0     12     9      3
 ---------------------------------------------------------------------------------
 (2) _TurnOffRelays                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PollSensor                                           2     2      0      90
                                              5 BANK0      2     2      0
                          _UART_putc
 ---------------------------------------------------------------------------------
 (2) _UART_putc                                            1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPorts
   _InitTimer
   _Init_UART
   _PollSensor
     _UART_putc
   _Pr_UART_Data
     _TurnOffRelays
     _generateCRC
       _calc_crc
   _Read_UART
   _TestRelays
     _TurnOffRelays

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               5E      0      13       6       20.2%
BITBANK1            5E      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               5E     24      4E       4       83.0%
BITBANK0            5E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      61       8        0.0%
ABS                  0      0      61       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Sep 08 10:40:26 2015

                      pc 0002              __CFG_CP$OFF 0000                       l90 031B  
           generateCRC@i 0061                       fsr 0004                      l131 02FD  
                    l135 038B                      l161 007C                      l162 008E  
                    l146 026A                      l170 01CE                      l163 00A0  
                    l164 00B2                      l180 01E7                      l165 00C4  
                    l181 01E9                      l173 01DB                      l166 00D6  
                    l159 006B                      l175 01DD                      l176 01DF  
                    l177 01E1                      l178 01E3                      l179 01E5  
                    l920 02B3                      l922 02B5                      l940 0217  
                    l942 024B                      l984 01EB                      l986 01FC  
                    u325 0229                      u415 004F                      u425 0061  
                    u435 02DE                      u355 020B                      u445 02FB  
                    _isr 0168                      fsr0 0004                      indf 0000  
           __CFG_FOSC$HS 0000   __size_of_TurnOffRelays 000B                     S1178 036B  
           __CFG_LVP$OFF 0000                     l1008 0252                     l1018 0277  
                   l1064 02E0                     l1056 00D8                     l1176 01F0  
                   ?_isr 0049             __CFG_WDTE$ON 0000               Read_UART@c 004E  
         generateCRC@crc 005F           generateCRC@buf 005E           generateCRC@len 0059  
                   _main 0305                     btemp 007E            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0011                     ttemp 007E  
                   wtemp 007E                    ??_isr 0049            ?_Pr_UART_Data 0049  
                  ?_main 0049                    _T1CON 0010           __CFG_DEBUG$OFF 0000  
                  i1l127 01BF                    _RCREG 001A                    _TMR1H 000F  
                  _TMR1L 000E                    _SPBRG 0099                    u49_25 017E  
                  _TXREG 0019            __CFG_PWRTE$ON 0000                    _RxBuf 002C  
                  _Rx_OK 0024                    _TxBuf 00A0                    _RxPtr 0029  
     __size_of_UART_putc 000C                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
     Pr_UART_Data@status 0069                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F            _TurnOffRelays 0394  
        __initialization 0013             __end_of_main 0335           ??_Pr_UART_Data 0063  
                 ??_main 006C                   _ADCON1 009F                   i1l1130 01B1  
                 i1l1106 0186                   i1l1116 0196       __size_of_Init_UART 000D  
       __end_of_calc_crc 02D0       __size_of_Read_UART 0041       __size_of_InitTimer 0013  
     __size_of_InitPorts 0079           ?_TurnOffRelays 0049     __size_of_generateCRC 0044  
             _PollSensor 02D0        __end_of_UART_putc 0394               _TestRelays 01CA  
                 saved_w 007E  __end_of__initialization 0028           __pcstackCOMMON 0000  
           __pidataBANK0 03A7             __pidataBANK1 0335        __end_of_Init_UART 0388  
      __end_of_Read_UART 0293        __end_of_InitTimer 035B        __end_of_InitPorts 0168  
         _OPTION_REGbits 0081               __pbssBANK0 0020     __end_of_Pr_UART_Data 00EF  
        ??_TurnOffRelays 0000              ?_PollSensor 0049               __pmaintext 0305  
             __pintentry 0004              ?_TestRelays 0049                ?_calc_crc 004D  
            PollSensor@i 004E                  _PrRxMsg 0028                  _RxTimer 002A  
            TestRelays@i 004D             _RedLED_timer 0022                  __ptext1 01CA  
                __ptext2 0252                  __ptext3 002B                  __ptext4 020E  
                __ptext5 0293                  __ptext6 0394                  __ptext7 02D0  
                __ptext8 0388                  __ptext9 037B               ??_calc_crc 0050  
              _T1CONbits 0010             __size_of_isr 0062      __size_of_PollSensor 0035  
                clrloop0 03A0     end_of_initialization 0028      __size_of_TestRelays 0044  
              _RCSTAbits 0018                _PORTAbits 0005                _PORTBbits 0006  
              _PORTCbits 0007                _PORTDbits 0008                _PORTEbits 0009  
              _UART_putc 0388                _TRISAbits 0085                _TRISBbits 0086  
              _TRISCbits 0087                _TRISDbits 0088                _TRISEbits 0089  
  __size_of_Pr_UART_Data 00C4            ??_generateCRC 005B                _TXSTAbits 0098  
           _Pr_UART_Data 002B               ?_UART_putc 0049      start_initialization 0013  
              _Init_UART 037B          _SecondInterrupt 002B                _Read_UART 0252  
              _InitTimer 0348                _InitPorts 00EF              __end_of_isr 01CA  
           ??_PollSensor 0000                _PollTimer 006D      __end_of_generateCRC 0252  
             init_fetch0 035B             ??_TestRelays 0000              __pdataBANK0 006D  
            __pdataBANK1 00A0                ___latbits 0001               ?_Init_UART 0049  
          __pcstackBANK0 0049        __size_of_calc_crc 003D               ?_Read_UART 0049  
             ?_InitTimer 0049               ?_InitPorts 0049       __end_of_PollSensor 0305  
     __end_of_TestRelays 020E    __end_of_TurnOffRelays 039F                calc_crc@i 0058  
              __pswtext1 036B              ??_UART_putc 0000         calc_crc@crc_buff 004D  
      interrupt_function 0004              _generateCRC 020E                clear_ram0 039F  
               _PIE1bits 008C               UART_putc@c 004D                 _PIR1bits 000C  
            calc_crc@x16 0056              ??_Init_UART 0000              ??_Read_UART 004D  
            ??_InitTimer 0000              ??_InitPorts 0000           _GreenLED_timer 0020  
               _calc_crc 0293                 __ptext10 0348                 __ptext11 00EF  
               __ptext12 0168            __size_of_main 0030          Pr_UART_Data@crc 006A  
               isr@Count 0026               _INTCONbits 000B    Pr_UART_Data@sensorVal 0067  
               init_ram0 035F                 intlevel1 0000            calc_crc@input 004F  
           ?_generateCRC 0059  
